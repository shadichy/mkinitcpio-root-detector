#!/usr/bin/bash

call_err() {
    echo "$1"
    echo "Trying to remount..."
    sleep 5
}

live_mount(){
    # mkdir -p /donkey/a # upper
    # mkdir -p /donkey/b # workdir
    # mkdir -p /live_root/
    mkdir -p /new_root/
    # mkdir -p /source/ # lower
    # mount $root /new_root/ 2> /dev/null
    # mount /new_root/live/airootfs.sfs /source/ 2> /dev/null
    # mount -t overlay -o lowerdir=/source/,upperdir=/donkey/a/,workdir=/donkey/b overlay /live_root
    # mount -t tmpfs -o size=100% none /donkey/a
    # mount -t tmpfs -o size=100% none /donkey/b
    # [ -d /source/merge/ ] && cp -prfv /source/merge/* /live_root/
    # mount --bind /live_root /new_root/
    # mkdir /new_root/cdrom/ 2> /dev/null
    # mkdir /new_root/source/ 2> /dev/null
    # mount $root /new_root/cdrom/ 2> /dev/null
    # mount /new_root/cdrom/live/airootfs.sfs /new_root/source/ 2> /dev/null
    # [ "$home" != "" ] && mount $home /new_root/home 2>/dev/null
    mkdir /cdrom
    mkdir /data
    mkdir /overlay
    cdrom_mounted=0
    sfsroot_mounted=0
    data_mounted=0
    overlay_mounted=0
    overlay_chrooted=0
    finerr=1
    i=0
    while [ "$i" -le 5 ]; do
        i=`expr $i + 1`
        
        # Mount the device containing the live filesystem
        if [ "$cdrom_mounted" -ne 1 ] && ! timeout 10 mount ${devfstype:-auto} -o ${rwopt:-ro}${devflags:+,$devflags} $dev /cdrom &>/dev/null; then
            call_err "Failed to mount $dev on /cdrom! Did you label the disk?"
            continue
        fi
        cdrom_mounted=1

        # Mount the real root filesystem
        [ -z "$rootfstype" ] && rootfstype="squashfs"
        if [ "$sfsroot_mounted" -ne 1 ] && ! timeout 10 mount -t ${rootfstype:-auto} -o ro${rootflags:+,$rootflags} ${root:-"/cdrom/root.sfs"} "$1" &>/dev/null; then
            call_err "Failed to mount $root on $1! Maybe the disk image $root is missing."
            continue
        fi
        sfsroot_mounted=1

        # Mount the data filesystem
        if [ "$data_mounted" -ne 1 ] && ! timeout 10 mount -t ${datafstype:-auto} ${dataflags:+-o $dataflags} ${data:-"/cdrom/data.img"} /data &>/dev/null;then
            call_err "Failed to mount $data on /data! Maybe the disk image $data is missing."
            continue
        fi
        data_mounted=1

        # Mount the device for overlay filesystem
        if [ ! -z "$overlay" ]; then
            if [ "$overlay_mounted" -ne 1 ] && ! timeout 10 mount -t ${overlayfstype:-auto} ${overlayflags:+-o $overlayflags} "$overlay" /overlay &>/dev/null;then
                call_err "Failed to mount $overlay on /overlay!"
                continue
            fi
            overlay_mounted=1
            [ ! -d /overlay/rw ] && mkdir /overlay/rw
            [ ! -d /overlay/wk ] && mkdir /overlay/wk
            if [ "$overlay_chrooted" -ne 1 ] && ! mount -t overlay overlay -o lowerdir=$1:/data,upperdir=/overlay/rw,workdir=/overlay/wk "$1" &>/dev/null; then
                call_err "Failed to mount overlay filesystem!"
                continue
            fi
            overlay_chrooted=1
        else
            mount --bind /data/var "$1"/var &>/dev/null
        fi

        # Bind
        mount --bind /cdrom "$1"/cdrom &>/dev/null
        finerr=1
        break
    done

    # Error handling
    if [ $finerr -eq 0 ]; then
        echo "You are now being dropped into an emergency shell."
        launch_interactive_shell
        msg "Trying to continue (this will most likely fail) ..."
    fi
}

is_file_avaiable(){
    disktmp=$(mktemp)
    rm -f $disktmp
    mkdir -p $disktmp || true
    timeout 10 mount -t auto "$1" $disktmp &>/dev/null
    [ -f "$disktmp/$2" ] && [ -b "$1" ]
    status=$?
    umount -lf $disktmp 2>/dev/null
    return $status
}

run_hook() {
    # live-boot
    if cat /proc/cmdline | grep "break=live" >/dev/null ; then
        launch_interactive_shell
    fi
    for mod in dm_mod dm-raid raid0 raid1 raid456 loop ; do
        modprobe $mod || true
    done
    if [ -f /ventoy/hook/arch/ventoy-disk.sh ] ; then
        echo "Loading Ventoy hooks"
        sh /ventoy/hook/arch/ventoy-disk.sh || true
        sleep 0.3
    fi
    if cat /proc/cmdline | grep "boot=live" >/dev/null; then
        found_dev=0
        while [ "$dev" == "" ] ; do
            list=$(ls /sys/class/block/ | grep ".*[0-9]$" | grep -v loop | grep -v ram | grep -v nbd | grep -v fd | sed "s|^|/dev/|g")
            for part in $list
            do
                sleep 0.1
                echo "Looking for: $part"
                if is_file_avaiable "$part" "/dev.sfs"; then
                    export dev=$part
                    found_dev=1
                elif is_file_avaiable "$part" "/data-here"; then
                    export data=$part
                fi
            done
        done
        if [ "$found_dev" -eq 0 ]; then
            echo "No root device found!"
            launch_interactive_shell
        fi
        export mount_handler="live_mount"
    fi
}

run_latehook(){
    if ! cat /proc/cmdline | grep "init=" ; then
        export init=/sbin/init
    fi
    if cat /proc/cmdline | grep "break=bruh" >/dev/null ; then
        launch_interactive_shell
    fi   
    # This is bruh moment (debug timeout)
    # echo -en "\033c"
    # echo " _                _     "     
    # echo "| |              | |    " 
    # echo "| |__  _ __ _   _| |__  "
    # echo "| '_ \| '__| | | | '_ \ "
    # echo "| |_) | |  | |_| | | | |"
    # echo "|_.__/|_|   \__,_|_| |_|"
    # sleep 0.3
}
