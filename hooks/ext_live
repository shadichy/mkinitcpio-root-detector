#!/usr/bin/ash

live_profile() {
    driver=${driver:-prop}
    lang=${lang:-en_US}
    keytable=${keytable:-us}
    tz=${tz:-"Etc/UTC"}
}

_call_err() {
    echo "ERROR: $1"
    echo "   Falling back to interactive prompt"
    echo "   You can try to fix the problem manually, log out when you are finished"
    launch_interactive_shell
}

_p_has(){
    disktmp=$(mktemp)
    rm -f $disktmp
    mkdir -p $disktmp || true
    timeout 10 mount -t auto "$1" $disktmp
    [ -f "$disktmp/$2" ] && [ -b "$1" ]
    status=$?
    umount -lf $disktmp
    return $status
}

_getdev(){
    [ "$1" ] && (resolve_device "$1" || printf $1) || printf "$2"
}

_mount_dev() {
    local dev="${1}" mnt="${2}" flg="${3}" opts="${4}"

    mkdir -p "${mnt}"

    msg ":: Mounting '${dev}' to '${mnt}'"
    [ "${dev%%'/dev/'*}" ] || while ! poll_device "${dev}" 30; do
        _call_err "'${dev}' device did not show up after 30 seconds..."
    done

    timeout 10 mount -o ${opts} ${flg} "${dev}" "${mnt}"
    return $?
}

extos_mount_handler() {
    [ "$rootfs_dev" ] && rootfs_dev=$(resolve_device "$rootfs_dev" || printf $rootfs_dev)
    root=$(_getdev $root "/rootfs.sfs")
    data=$(_getdev $data "/data.img")
    pkgd=$(_getdev $pkgd "/pkgs")

    local cdrom_mntd pkgd_mntd

    [ "${root%%'/dev/'*}" ] || local r_blk=y
    [ "${data%%'/dev/'*}" ] || local d_blk=y
    [ "${pkgd%%'/dev/'*}" ] || local p_blk=y

    if ! ([ "$r_blk" ] && [ "$d_blk" ] && [ "$p_blk" ]); then
        local i=0
        while [ -z "$rootfs_dev" ] && [ "$i" -le 5 ] ; do
            [ "$r_blk" ] && [ "$d_blk" ] && [ "$p_blk" ] && break
            i=`expr $i + 1`
            list=$(ls /sys/class/block/ | grep ".*[0-9]$" | grep -Ev "loop|ram|nbd|fd" | sed "s|^|/dev/|g")
            for part in $list; do
                sleep 0.1
                msg "Looking for: $part"
                local left
                if [ ! "$r_blk" ]; then
                    left=$root
                elif [ ! "$d_blk" ]; then
                    left=$data
                elif [ ! "$p_blk" ]; then
                    left=$pkgd
                fi
                [ "$left" ] && _p_has "$part" "${left}" && rootfs_dev=$part
                unset left
                [ "$r_blk" ] || (_p_has "$part" "/.extos-rootfsver" && root=$part)
                [ "$d_blk" ] || (_p_has "$part" "/data/.extos-profile" && data=$part)
                [ "$p_blk" ] || (_p_has "$part" "/.extos-pkgls" && pkgd=$part)
            done
        done
        unset i
        [ "$rootfs_dev" ] && cdrom_mntd=y || [ "$r_blk" ] || _call_err "No rootfs device found!"
    fi

    # Mount the device containing the filesystem
    local cdrom="/run/extos/cdrom"
    [ "$cdrom_mntd" ] && _mount_dev "$rootfs_dev" "$cdrom" "-t ${rdevfstype:-auto}" "${rwopt:-ro},${rdevflags:-defaults}" || _call_err "Failed to mount '${rootfs_dev}' on '${cdrom}'! Wrong fs type or corrupted device!"

    # Mount the real root filesystem
    local rootfs="/run/extos/rootfs" 
    local rp="$([ "$r_blk" ] || printf "$cdrom/")${root}"
    _mount_dev "${rp}" "$rootfs" "$([ -d $rp ] && printf "--bind" || printf "-t ${rootfstype:-auto}")" "${rootflags:-defaults}" || _call_err "Failed to mount '${root}' on '${rootfs}'! Wrong fs type or corrupted device!"

    # Mount the data filesystem
    local datafs="/run/extos/data"
    local fallback=y
    if [ "$d_blk" ] || [ -f "$cdrom/$data" ]; then
        local dp="$([ "$d_blk" ] || printf "$cdrom/")${data}"
        _mount_dev "${dp}" "$datafs" "$([ -d $dp ] && printf "--bind" || printf "-t ${datafstype:-auto}")" "${dataflags:-defaults}" && unset fallback
    fi
    if [ "$fallback" ]; then
        if [ "$data" != "tmpfs" ] && [ "$data" != "ramfs" ] && [ "$data" ]; then
            echo "ERROR: $data device not found, wrong fs type or corrupted device!"
            echo "Falling back to default profile..."
            data=""
        fi
        [ "$data" ] || data="tmpfs"
        [ -d "$datafs" ] || mkdir -p "$datafs"
        timeout 10 mount -t $data $data $datafs || _call_err "Failed to set default profile!"
        mkdir -p "$datafs/data"
        mkdir -p "$datafs/overlay"
    fi

    # Mount packages
    local pargs=""
    local pkgfs="/run/extos/pkgs"
    local pkgdir="/run/extos/packages"
    if [ "$p_blk" ] || [ -e "$cdrom/$pkgs" ]; then
        local pp="$([ "$p_blk" ] || printf "$cdrom/")${pkgd}"
        if _mount_dev "${pp}" "$pkgfs" "$([ -d $pp ] && printf "--bind" || printf "-t ${pkgdfstype:-auto}")" "${pkgdflags:-defaults}"; then
            for p in ${pkgfs}/* ${pkgfs}/.[^.]*; do
                [ "$p" = "${pkgfs}/.[^.]*" ] && continue
                local pdir="${pkgdir}/${p#"$pkgfs"}"
                mkdir -p $pdir
                _mount_dev "${p}" "${pdir}" "$([ -d $p ] && printf "--bind" || printf "-t auto")" "defaults" && pargs="${pargs}:${pdir}"
                unset pdir
            done
            pkgd_mntd=y
        else
            echo "ERROR: $pkgd device not found, wrong fs type or corrupted device!"
            msg "Continue to boot with all packages disabled..."
        fi
    fi

    mount -t overlay overlay -o lowerdir=${rootfs}${pargs},upperdir=${datafs}/data,workdir=${datafs}/overlay "$1"
    
    # Bind
    [ "$cdrom_mntd" ] && ( [ -d "$1/cdrom" ] || mkdir "$1/cdrom" ) && mount --bind "$cdrom" "$1/cdrom"
    [ "$pkgd_mntd" ] && ( [ -d "$1/packages"  ] || mkdir "$1/packages" ) && mount --bind "$pkgfs" "$1/packages"

}

run_hook() {
    for mod in dm_mod dm-raid raid0 raid1 raid456 loop ; do
        modprobe $mod || true
    done
    if [ -f /ventoy/hook/arch/ventoy-disk.sh ] ; then
        echo "Loading Ventoy hooks"
        sh /ventoy/hook/arch/ventoy-disk.sh || true
        sleep 0.3
    fi
    export mount_handler="extos_mount_handler"
}
